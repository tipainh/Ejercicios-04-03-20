
Problema 1:

You are organizing a Hash Code hub and want to order pizza for your hub’s participants. Luckily, there is a nearby pizzeria with really good pizza.
The pizzeria has different types of pizza, and to keep the food offering for your hub interesting, you can only order at most one pizza of each type. 
Fortunately, there are many types of pizza to choose from!
Each type of pizza has a specified size: the size is the number of slices in a pizza of this type.
You estimated the maximum number of pizza slices that you want to order for your hub based on the number of registered participants. In order to reduce food waste,
your goal is to order as many pizza slices as possible, but not more than the maximum number .

Para este problema existirán 3 entradas que condicionarán vuestro problema, y que inicialmente debereis generar para probar, y que yo variaré para comprobar 
la validez de la solución.
Un entero M: M<10^9. El número máximo de slices de pizza.
Un entero N: N<10^6 El número máximo de diferentes tipos de pizza
Una lista S, de longitud N, que contenga el número de trozos en cada tipo de pizza, en orden ascendente.

Ejemplo
M = 17
N = 4
S = [2 5 6 8]

Vuestra solución deberá estar compuesta por:

Un entero K: Número de tipos de pizza que necesitais (0 <= K <= N)
Una lista L de longitud K, indicando el tipo de pizza seleccionada.

En el caso anterior, si quereis 3 pizzas de 2,6 y 8 trozos cada una, vuestra solución será:
K = 3
L = [0 2 3]

----------------------------------------------------------------------------------------------------------------------------------
Problema 2:

Our Battlestarcraft Algorithmica ship is being chased through space by persistent robots called Pylons! We have just teleported to a new galaxy to try to 
shake them off of our tail, and we want to stay here for as long as possible so we can buy time to plan our next move... but we do not want to get caught!

This galaxy is a flat grid of R rows and C columns; the rows are numbered from 1 to R from top to bottom, and the columns are numbered from 1 to C from left to right. We can choose which cell to start in, and we must continue to jump between cells until we have visited each cell in the galaxy exactly once. That is, we can never revisit a cell, including our starting cell.

We do not want to make it too easy for the Pylons to guess where we will go next. Each time we jump from our current cell, we must choose a destination 
cell that does not share a row, column, or diagonal with that current cell. Let (i, j) denote the cell in the i-th row and j-th column; then a jump from a current 
cell (r, c) to a destination cell (r', c') is invalid if and only if any of these is true:
r = r'
c = c'
r - c = r' - c'
r + c = r' + c'

Can you help us find an order in which to visit each of the R × C cells, such that the move between any pair of consecutive cells in the sequence is valid? 
Or is it impossible for us to escape from the Pylons?

Las entradas del problema serán: 
R= Numero de filas en la galaxia
C= Número de columnas en la galaxia

La salida estará definida por:

Una String Y: Que contenga la cadena POSSIBLE si es posible resolver el problema para las condiciones dadas, e IMPOSSIBLE si no es posible.

En caso de que Y sea igual a POSSIBLE, tambien es necesario que la salida sea:
Un elemento L iterable (no especifico que sea una lista, tendreis que buscaros las habichuelas) de dimensión R * C, en donde cada partición de ese elemento
 iterable contenga las coordenadas recorridas por el Pylon.

Ejemplo:
Entrada:
R = 2
C = 5

Y = POSSIBLE
L =  (2,3) , (1,1) , (2,4) , (1,2) , (2,5) , (1,3) , (2,1) , (1,5) , (2,2) , (1,4)
